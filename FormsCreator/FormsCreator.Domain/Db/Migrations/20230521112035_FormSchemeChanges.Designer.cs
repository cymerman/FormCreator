// <auto-generated />
using System;
using FormsCreator.Domain.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace FormsCreator.Domain.Db.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230521112035_FormSchemeChanges")]
    partial class FormSchemeChanges
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("FormsCreator.Domain.Core.Forms.Form", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Data")
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<long>("FormDefinitionId")
                        .HasColumnType("bigint")
                        .HasColumnName("form_definition_id");

                    b.HasKey("Id")
                        .HasName("pk_form");

                    b.HasIndex("FormDefinitionId")
                        .HasDatabaseName("ix_form_form_definition_id");

                    b.ToTable("form");
                });

            modelBuilder.Entity("FormsCreator.Domain.Core.Forms.FormDefinition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("FileCount")
                        .HasColumnType("integer")
                        .HasColumnName("file_count");

                    b.Property<int?>("FileCountMaximum")
                        .HasColumnType("integer")
                        .HasColumnName("file_count_maximum");

                    b.Property<int?>("FileCountMinimum")
                        .HasColumnType("integer")
                        .HasColumnName("file_count_minimum");

                    b.Property<string>("Form")
                        .HasColumnType("text")
                        .HasColumnName("form");

                    b.Property<long?>("FormDefinitionId")
                        .HasColumnType("bigint")
                        .HasColumnName("form_definition_id");

                    b.Property<string>("FormUid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("form_uid");

                    b.Property<bool>("IsFileCountLimited")
                        .HasColumnType("boolean")
                        .HasColumnName("is_file_count_limited");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_form_definitions");

                    b.HasIndex("FormDefinitionId")
                        .HasDatabaseName("ix_form_definitions_form_definition_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_form_definitions_user_id");

                    b.ToTable("form_definitions");
                });

            modelBuilder.Entity("FormsCreator.Domain.Core.Forms.FormHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on");

                    b.Property<long>("FormId")
                        .HasColumnType("bigint")
                        .HasColumnName("form_id");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_form_history");

                    b.HasIndex("FormId")
                        .HasDatabaseName("ix_form_history_form_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_form_history_user_id");

                    b.ToTable("form_history");
                });

            modelBuilder.Entity("FormsCreator.Domain.Core.Security.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("login");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 5, 21, 13, 20, 32, 215, DateTimeKind.Local).AddTicks(5349),
                            Email = "mateuszcymerman95@gmail.com",
                            IsAdmin = true,
                            Login = "admin",
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 5, 21, 13, 20, 32, 231, DateTimeKind.Local).AddTicks(9052),
                            Password = "admin"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = 1L,
                            CreatedOn = new DateTime(2023, 5, 21, 13, 20, 32, 232, DateTimeKind.Local).AddTicks(1331),
                            Email = "cymekdeveloper@gmail.com",
                            IsAdmin = false,
                            Login = "testowy",
                            ModifiedBy = 1L,
                            ModifiedOn = new DateTime(2023, 5, 21, 13, 20, 32, 232, DateTimeKind.Local).AddTicks(1402),
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text")
                        .HasColumnName("friendly_name");

                    b.Property<string>("Xml")
                        .HasColumnType("text")
                        .HasColumnName("xml");

                    b.HasKey("Id")
                        .HasName("pk_data_protection_keys");

                    b.ToTable("data_protection_keys");
                });

            modelBuilder.Entity("FormsCreator.Domain.Core.Forms.Form", b =>
                {
                    b.HasOne("FormsCreator.Domain.Core.Forms.FormDefinition", "FormDefinition")
                        .WithMany()
                        .HasForeignKey("FormDefinitionId")
                        .HasConstraintName("fk_form_form_definitions_form_definition_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormDefinition");
                });

            modelBuilder.Entity("FormsCreator.Domain.Core.Forms.FormDefinition", b =>
                {
                    b.HasOne("FormsCreator.Domain.Core.Forms.FormDefinition", null)
                        .WithMany("Children")
                        .HasForeignKey("FormDefinitionId")
                        .HasConstraintName("fk_form_definitions_form_definitions_form_definition_id");

                    b.HasOne("FormsCreator.Domain.Core.Security.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_form_definitions_users_user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FormsCreator.Domain.Core.Forms.FormHistory", b =>
                {
                    b.HasOne("FormsCreator.Domain.Core.Forms.Form", "Form")
                        .WithMany("FormHistories")
                        .HasForeignKey("FormId")
                        .HasConstraintName("fk_form_history_form_form_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormsCreator.Domain.Core.Security.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_form_history_users_user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FormsCreator.Domain.Core.Forms.Form", b =>
                {
                    b.Navigation("FormHistories");
                });

            modelBuilder.Entity("FormsCreator.Domain.Core.Forms.FormDefinition", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
